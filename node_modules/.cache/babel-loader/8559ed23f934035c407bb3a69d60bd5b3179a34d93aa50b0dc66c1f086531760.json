{"ast":null,"code":"export default {\n  name: 'NavBar',\n  data() {\n    return {\n      isFixed: false,\n      activeSection: 'home',\n      indicatorWidth: 0,\n      indicatorColor: '',\n      indicatorLeft: 0,\n      sections: [{\n        label: 'Home',\n        target: 'home',\n        color: '#ce0000'\n      }, {\n        label: 'About Me',\n        target: 'about',\n        color: '#ff6a00'\n      }, {\n        label: 'Skills',\n        target: 'skills',\n        color: '#ffcc00'\n      }, {\n        label: 'Projects',\n        target: 'projects',\n        color: '#00cc00'\n      }, {\n        label: 'Contact',\n        target: 'contacts',\n        color: '#0e6aff'\n      }]\n    };\n  },\n  mounted() {\n    window.addEventListener('scroll', this.handleScroll);\n    this.handleScroll(); // Call handleScroll on mount to set initial state\n  },\n  beforeDestroy() {\n    window.removeEventListener('scroll', this.handleScroll);\n  },\n  methods: {\n    handleClick(section) {\n      this.activeSection = section.target;\n    },\n    handleScroll() {\n      const navbar = this.$refs.navbar;\n      const offset = window.scrollY;\n      const fourPercent = window.innerHeight * 0.04;\n      this.isFixed = offset > navbar.clientHeight - fourPercent;\n      const twentyPercent = window.innerHeight * 0.5;\n      const activeSection = this.sections.find(section => {\n        const targetElement = document.getElementById(section.target);\n        if (targetElement) {\n          const sectionTop = targetElement.offsetTop - navbar.clientHeight - twentyPercent;\n          const sectionBottom = sectionTop + targetElement.offsetHeight;\n          return offset >= sectionTop && offset < sectionBottom;\n        }\n        return false;\n      });\n      if (activeSection) {\n        this.activeSection = activeSection.target;\n        this.updateIndicator(activeSection);\n      }\n    },\n    updateIndicator(section) {\n      const activeItem = this.$el.querySelector(`[data-target=\"${section.label}\"]`);\n      this.indicatorWidth = `${activeItem.offsetWidth}px`;\n      this.indicatorColor = section.color;\n      this.indicatorLeft = `${activeItem.offsetLeft}px`;\n      // Mettre à jour la couleur du texte et de l'indicateur\n      activeItem.style.color = section.color;\n\n      // Réinitialiser la couleur du texte des autres éléments\n      this.sections.forEach(otherSection => {\n        if (otherSection.label !== section.label) {\n          const otherItem = this.$el.querySelector(`[data-target=\"${otherSection.label}\"]`);\n          otherItem.style.color = '#83818c';\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","isFixed","activeSection","indicatorWidth","indicatorColor","indicatorLeft","sections","label","target","color","mounted","window","addEventListener","handleScroll","beforeDestroy","removeEventListener","methods","handleClick","section","navbar","$refs","offset","scrollY","fourPercent","innerHeight","clientHeight","twentyPercent","find","targetElement","document","getElementById","sectionTop","offsetTop","sectionBottom","offsetHeight","updateIndicator","activeItem","$el","querySelector","offsetWidth","offsetLeft","style","forEach","otherSection","otherItem"],"sources":["src/components/Navbar.vue"],"sourcesContent":["<template>\n  <div>\n    <nav class=\"custom-navbar\" :class=\"{ 'fixed': isFixed }\" ref=\"navbar\">\n      <a v-for=\"section in sections\" :key=\"section.target\" \n         v-scroll-to=\"`#${section.target}`\" \n         @click=\"handleClick(section)\"\n         :class=\"{ 'nav-item': true, 'is-active': section.target === activeSection }\"\n         :data-active-color=\"section.color\"\n         :data-target=\"section.label\">\n        {{ section.label }}\n      </a>\n      <span class=\"nav-indicator\" :style=\"{ width: indicatorWidth, backgroundColor: indicatorColor, left: indicatorLeft }\"></span>\n    </nav>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'NavBar',\n  data() {\n    return {\n      isFixed: false,\n      activeSection: 'home',\n      indicatorWidth: 0,\n      indicatorColor: '',\n      indicatorLeft: 0,\n      sections: [\n        { label: 'Home', target: 'home', color: '#ce0000' },\n        { label: 'About Me', target: 'about', color: '#ff6a00' },\n        { label: 'Skills', target: 'skills', color: '#ffcc00' },\n        { label: 'Projects', target: 'projects', color: '#00cc00' },\n        { label: 'Contact', target: 'contacts', color: '#0e6aff' },\n      ],\n    };\n  },\n  mounted() {\n    window.addEventListener('scroll', this.handleScroll);\n    this.handleScroll(); // Call handleScroll on mount to set initial state\n  },\n  beforeDestroy() {\n    window.removeEventListener('scroll', this.handleScroll);\n  },\n  methods: {\n    handleClick(section) {\n      this.activeSection = section.target;\n    },\n    handleScroll() {\n      const navbar = this.$refs.navbar;\n      const offset = window.scrollY;\n      const fourPercent = window.innerHeight * 0.04;\n      this.isFixed = offset > navbar.clientHeight - fourPercent;\n      const twentyPercent = window.innerHeight * 0.5;\n\n      const activeSection = this.sections.find(section => {\n        const targetElement = document.getElementById(section.target);\n        if (targetElement) {\n          const sectionTop = targetElement.offsetTop - navbar.clientHeight - twentyPercent;\n          const sectionBottom = sectionTop + targetElement.offsetHeight;\n          return offset >= sectionTop && offset < sectionBottom;\n        }\n        return false;\n      });\n      if (activeSection) {\n        this.activeSection = activeSection.target;\n        this.updateIndicator(activeSection);\n      }\n    },\n    updateIndicator(section) {\n      const activeItem = this.$el.querySelector(`[data-target=\"${section.label}\"]`);\n\n      this.indicatorWidth = `${activeItem.offsetWidth}px`;\n      this.indicatorColor = section.color;\n      this.indicatorLeft = `${activeItem.offsetLeft}px`;\n      // Mettre à jour la couleur du texte et de l'indicateur\n      activeItem.style.color = section.color;\n\n      // Réinitialiser la couleur du texte des autres éléments\n      this.sections.forEach(otherSection => {\n        if (otherSection.label !== section.label) {\n          const otherItem = this.$el.querySelector(`[data-target=\"${otherSection.label}\"]`);\n          otherItem.style.color = '#83818c';\n        }\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.custom-navbar {\n  z-index: 1000;\n  margin: auto;\n  background-color: rgba(255, 255, 255, 1);\n  max-width: 70vw;\n  padding: 0 -10%;\n  border-radius: 5vh;\n  box-shadow: 10px 20px 50px rgba(255, 255, 255, 0.8);\n  display: flex;\n  justify-content: space-around;\n  overflow: hidden;\n  overflow-x: auto;\n  position: relative;\n  text-align: center;\n  align-items: center;\n  transition: top 0.5s ease, background-color 1.5s ease, padding-top 0.5s ease;\n  cursor: pointer;\n}\n\n.fixed {\n  padding: 0;\n  margin: auto;\n  position: fixed;\n  top: 4%;\n  left: 50%;\n  transform: translate(-50%, 0);\n  width: 100%;\n  background-color: rgba(255, 255, 255, 0.8);\n  transition: top 0.3s ease, background-color 1.5s ease, padding-top 0.3s ease;\n}\n\n.nav-item {\n  color: #83818c;\n  font-family: arial, sans-serif;\n  padding: 3.5vh 1vw;\n  margin: 0 6px;\n  position: relative;\n  font-family: \"Protest Strike\", sans-serif;\n  font-size: 2vw;\n  font-style: normal;\n  text-decoration: none;\n}\n\n.nav-item:before {\n  content: \"\";\n  position: absolute;\n  bottom: -6px;\n  background-color: #dfe2ea;\n  height: 5px;\n  width: 100%;\n  border-radius: 8px 8px 0 0;\n  left: 0;\n  transition: .3s;\n}\n\n.nav-item:not(.is-active):hover:before {\n  bottom: 0;\n}\n\n.nav-item:not(.is-active):hover {\n  color: #333;\n}\n\n.nav-indicator {\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  height: 5px;\n  transition: .4s;\n  border-radius: 8px 8px 0 0;\n}\n\n</style>\n"],"mappings":"AAiBA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,aAAA;MACAC,cAAA;MACAC,cAAA;MACAC,aAAA;MACAC,QAAA,GACA;QAAAC,KAAA;QAAAC,MAAA;QAAAC,KAAA;MAAA,GACA;QAAAF,KAAA;QAAAC,MAAA;QAAAC,KAAA;MAAA,GACA;QAAAF,KAAA;QAAAC,MAAA;QAAAC,KAAA;MAAA,GACA;QAAAF,KAAA;QAAAC,MAAA;QAAAC,KAAA;MAAA,GACA;QAAAF,KAAA;QAAAC,MAAA;QAAAC,KAAA;MAAA;IAEA;EACA;EACAC,QAAA;IACAC,MAAA,CAAAC,gBAAA,gBAAAC,YAAA;IACA,KAAAA,YAAA;EACA;EACAC,cAAA;IACAH,MAAA,CAAAI,mBAAA,gBAAAF,YAAA;EACA;EACAG,OAAA;IACAC,YAAAC,OAAA;MACA,KAAAhB,aAAA,GAAAgB,OAAA,CAAAV,MAAA;IACA;IACAK,aAAA;MACA,MAAAM,MAAA,QAAAC,KAAA,CAAAD,MAAA;MACA,MAAAE,MAAA,GAAAV,MAAA,CAAAW,OAAA;MACA,MAAAC,WAAA,GAAAZ,MAAA,CAAAa,WAAA;MACA,KAAAvB,OAAA,GAAAoB,MAAA,GAAAF,MAAA,CAAAM,YAAA,GAAAF,WAAA;MACA,MAAAG,aAAA,GAAAf,MAAA,CAAAa,WAAA;MAEA,MAAAtB,aAAA,QAAAI,QAAA,CAAAqB,IAAA,CAAAT,OAAA;QACA,MAAAU,aAAA,GAAAC,QAAA,CAAAC,cAAA,CAAAZ,OAAA,CAAAV,MAAA;QACA,IAAAoB,aAAA;UACA,MAAAG,UAAA,GAAAH,aAAA,CAAAI,SAAA,GAAAb,MAAA,CAAAM,YAAA,GAAAC,aAAA;UACA,MAAAO,aAAA,GAAAF,UAAA,GAAAH,aAAA,CAAAM,YAAA;UACA,OAAAb,MAAA,IAAAU,UAAA,IAAAV,MAAA,GAAAY,aAAA;QACA;QACA;MACA;MACA,IAAA/B,aAAA;QACA,KAAAA,aAAA,GAAAA,aAAA,CAAAM,MAAA;QACA,KAAA2B,eAAA,CAAAjC,aAAA;MACA;IACA;IACAiC,gBAAAjB,OAAA;MACA,MAAAkB,UAAA,QAAAC,GAAA,CAAAC,aAAA,kBAAApB,OAAA,CAAAX,KAAA;MAEA,KAAAJ,cAAA,MAAAiC,UAAA,CAAAG,WAAA;MACA,KAAAnC,cAAA,GAAAc,OAAA,CAAAT,KAAA;MACA,KAAAJ,aAAA,MAAA+B,UAAA,CAAAI,UAAA;MACA;MACAJ,UAAA,CAAAK,KAAA,CAAAhC,KAAA,GAAAS,OAAA,CAAAT,KAAA;;MAEA;MACA,KAAAH,QAAA,CAAAoC,OAAA,CAAAC,YAAA;QACA,IAAAA,YAAA,CAAApC,KAAA,KAAAW,OAAA,CAAAX,KAAA;UACA,MAAAqC,SAAA,QAAAP,GAAA,CAAAC,aAAA,kBAAAK,YAAA,CAAApC,KAAA;UACAqC,SAAA,CAAAH,KAAA,CAAAhC,KAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}